/* The following code was generated by JFlex 1.4.1 on 11/18/19 7:56 PM */

/*
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing 6502
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>Assembler6502TokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.2
 *
 */

public class Assembler6502TokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 1
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\57\1\13\1\0\1\14\23\0\1\57\1\17\1\10\1\56"+
    "\1\3\1\5\1\36\1\11\2\0\1\16\1\16\1\7\1\16\1\20"+
    "\1\16\2\6\10\2\1\15\1\12\1\41\1\45\1\43\1\0\1\55"+
    "\1\32\1\21\1\46\1\35\1\30\1\4\1\1\1\31\1\22\1\52"+
    "\1\33\1\26\1\34\1\24\1\25\1\50\1\47\1\40\1\42\1\23"+
    "\1\54\1\51\1\53\1\37\1\27\1\1\1\7\1\0\1\7\1\17"+
    "\1\1\1\0\1\32\1\21\1\46\1\35\1\30\1\4\1\1\1\31"+
    "\1\22\1\52\1\33\1\26\1\34\1\24\1\25\1\50\1\47\1\40"+
    "\1\42\1\23\1\54\1\51\1\53\1\37\1\27\1\1\1\0\1\44"+
    "\1\0\1\17\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\2\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\12\1\1\10\1\1\1\10\1\1\2\10"+
    "\5\1\1\11\1\1\1\12\2\2\1\13\1\14\1\0"+
    "\22\1\1\11\13\1\3\12\1\15\3\1\1\12\1\1"+
    "\1\12\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\140\0\u01e0\0\140\0\u0210\0\u0240\0\u0270"+
    "\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0"+
    "\0\u0420\0\u0450\0\u0480\0\u04b0\0\u04e0\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0630\0\360\0\u0120\0\140"+
    "\0\140\0\u0660\0\u0690\0\u06c0\0\u06f0\0\u0720\0\u0750\0\u0780"+
    "\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900"+
    "\0\u0930\0\u0960\0\u0990\0\u09c0\0\220\0\u09f0\0\u0a20\0\u0a50"+
    "\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0"+
    "\0\u05a0\0\u0c00\0\u0c30\0\u0660\0\u0c60\0\u0c90\0\u0cc0\0\u0cf0"+
    "\0\u0d20\0\140\0\u0d50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\7\1\5\1\3"+
    "\1\10\1\11\1\12\1\13\1\14\1\3\2\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\4\1\25"+
    "\1\4\1\26\2\4\1\27\1\30\1\4\1\31\1\32"+
    "\1\33\1\34\1\35\1\15\1\36\1\4\1\37\1\4"+
    "\1\40\2\4\1\41\1\42\1\14\1\3\1\4\1\5"+
    "\1\6\1\4\1\43\1\5\1\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\3\2\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\4\1\25\1\4\1\26\2\4"+
    "\1\27\1\30\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\15\1\36\1\4\1\37\1\4\1\40\2\4\1\41"+
    "\1\42\1\14\60\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\15\4\1\44\2\4\1\44\1\4\3\44\7\4\2\44"+
    "\1\0\1\44\1\4\1\5\1\44\1\4\1\0\1\5"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\15\4"+
    "\1\44\2\4\1\44\1\4\3\44\7\4\2\44\3\0"+
    "\1\46\1\0\1\46\1\0\1\46\12\0\1\46\6\0"+
    "\1\46\1\0\1\46\2\0\1\46\10\0\1\46\17\0"+
    "\1\47\51\0\10\10\1\50\47\10\11\11\1\51\46\11"+
    "\13\12\1\0\44\12\14\0\1\14\42\0\1\14\1\0"+
    "\2\52\1\0\1\52\1\0\1\52\12\0\15\52\1\0"+
    "\2\52\1\0\1\52\3\0\7\52\3\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\1\4\1\53\1\4\1\54\3\4"+
    "\1\55\3\4\1\56\1\4\1\44\1\4\1\57\1\44"+
    "\1\4\3\44\1\60\1\4\1\61\1\60\3\4\2\44"+
    "\1\0\1\44\2\4\1\44\1\4\1\0\1\4\1\0"+
    "\3\44\2\0\1\45\1\0\1\44\1\0\3\4\1\62"+
    "\11\4\1\44\2\4\1\44\1\63\3\44\7\4\2\44"+
    "\1\0\1\44\2\4\1\44\1\4\1\0\1\4\1\0"+
    "\3\44\2\0\1\45\1\0\1\44\1\0\1\4\1\64"+
    "\4\4\1\65\1\66\1\4\1\67\3\4\1\44\1\70"+
    "\1\4\1\44\1\71\3\44\7\4\2\44\1\0\1\44"+
    "\2\4\1\44\1\4\1\0\1\4\1\0\3\44\2\0"+
    "\1\45\1\0\1\44\1\0\4\4\1\72\10\4\1\44"+
    "\2\4\1\44\1\4\3\44\7\4\2\44\1\0\1\44"+
    "\2\4\1\44\1\4\1\0\1\4\1\0\3\44\2\0"+
    "\1\45\1\0\1\44\1\0\15\4\1\44\1\4\1\65"+
    "\1\44\1\4\3\44\7\4\2\44\1\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\11\4\1\73\2\4\1\74\1\44"+
    "\1\4\1\75\1\44\1\76\3\44\7\4\2\44\1\0"+
    "\1\44\2\4\1\44\1\4\1\0\1\4\1\0\3\44"+
    "\2\0\1\45\1\0\1\44\1\0\4\4\1\76\10\4"+
    "\1\44\2\4\1\44\1\4\3\44\1\4\1\77\5\4"+
    "\2\44\1\0\1\44\2\4\1\44\1\4\1\0\1\4"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\3\4"+
    "\1\100\10\4\1\63\1\44\1\101\1\76\1\44\1\61"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\75"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\1\75\1\4\1\75\4\4\1\62\4\4\1\75"+
    "\1\44\2\4\1\44\1\4\3\44\1\72\1\75\3\4"+
    "\1\75\1\72\2\44\37\0\1\15\21\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\2\4\1\102\1\4\1\103\1\65"+
    "\1\4\1\104\5\4\1\44\1\4\1\65\1\44\1\4"+
    "\3\44\7\4\2\44\42\0\1\15\1\0\1\15\1\0"+
    "\1\15\12\0\1\44\2\4\1\44\1\4\1\0\1\4"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\1\63"+
    "\1\4\1\74\2\4\1\105\1\4\1\106\1\4\1\71"+
    "\3\4\1\44\1\4\1\54\1\44\1\4\3\44\7\4"+
    "\2\44\44\0\1\15\1\0\1\15\56\0\1\15\13\0"+
    "\1\44\2\4\1\44\1\4\1\0\1\4\1\0\3\44"+
    "\2\0\1\45\1\0\1\44\1\0\5\4\1\107\5\4"+
    "\1\72\1\4\1\44\2\4\1\44\1\4\3\44\2\4"+
    "\1\67\4\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\5\4\1\110\2\4\1\110\4\4\1\44\2\4"+
    "\1\44\1\4\3\44\7\4\2\44\1\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\13\4\1\72\1\4\1\44\2\4"+
    "\1\44\1\76\3\44\7\4\2\44\2\0\1\111\2\0"+
    "\1\111\14\0\15\111\1\0\2\111\1\0\1\111\3\0"+
    "\7\111\3\0\10\112\1\113\46\112\2\0\2\43\1\0"+
    "\1\43\1\0\1\43\12\0\15\43\1\0\2\43\1\0"+
    "\1\43\3\0\7\43\3\0\5\44\1\0\1\44\1\0"+
    "\3\44\2\0\1\44\1\0\1\44\1\0\36\44\1\0"+
    "\5\114\1\0\1\114\1\0\3\114\2\0\1\114\1\0"+
    "\1\114\1\0\36\114\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\2\4\1\75\12\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\7\4\1\75\5\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\15\4\1\44\2\4\1\44\1\4\3\44\1\4"+
    "\1\75\5\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\1\4\1\75\13\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\12\4\1\75\2\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\15\4\1\44\2\4\1\44\1\75\3\44\1\75"+
    "\6\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\5\4\1\75\7\4\1\44\2\4\1\44\1\4\3\44"+
    "\7\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\6\4\1\75\6\4\1\44\1\75\1\4\1\44\1\4"+
    "\3\44\1\75\6\4\2\44\1\0\1\44\2\4\1\44"+
    "\1\4\1\0\1\4\1\0\3\44\2\0\1\45\1\0"+
    "\1\44\1\0\15\4\1\44\2\4\1\44\1\4\3\44"+
    "\1\75\6\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\13\4\1\115\1\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\11\4\1\75\3\4\1\44\2\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\15\4\1\44\1\116\1\4\1\44\1\4\3\44"+
    "\7\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\6\4\1\75\6\4\1\44\1\75\1\4\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\11\4\1\75\3\4\1\44\2\4\1\44\1\75"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\15\4\1\44\1\75\1\4\1\44\1\4\3\44"+
    "\7\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\15\4\1\44\2\4\1\44\1\4\3\44\2\4\1\75"+
    "\4\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\15\4\1\44\1\75\1\4\1\44\1\75\3\44\7\4"+
    "\2\44\1\0\1\44\2\4\1\44\1\4\1\0\1\4"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\6\4"+
    "\1\75\2\4\1\75\3\4\1\44\1\75\1\4\1\44"+
    "\1\4\3\44\7\4\2\44\1\0\1\44\2\4\1\44"+
    "\1\4\1\0\1\4\1\0\3\44\2\0\1\45\1\0"+
    "\1\44\1\0\15\4\1\44\1\4\1\75\1\44\1\4"+
    "\3\44\7\4\2\44\1\0\1\44\2\4\1\44\1\4"+
    "\1\0\1\4\1\0\3\44\2\0\1\45\1\0\1\44"+
    "\1\0\15\4\1\44\2\4\1\44\1\4\3\44\6\4"+
    "\1\75\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\14\4\1\75\1\44\2\4\1\44\1\4\3\44\1\75"+
    "\6\4\2\44\1\0\1\44\2\4\1\44\1\4\1\0"+
    "\1\4\1\0\3\44\2\0\1\45\1\0\1\44\1\0"+
    "\15\4\1\44\2\4\1\44\1\75\3\44\7\4\2\44"+
    "\1\0\1\44\2\4\1\44\1\4\1\0\1\4\1\0"+
    "\3\44\2\0\1\45\1\0\1\44\1\0\1\4\1\75"+
    "\13\4\1\44\2\4\1\44\1\75\3\44\7\4\2\44"+
    "\1\0\1\44\2\4\1\44\1\4\1\0\1\4\1\0"+
    "\3\44\2\0\1\45\1\0\1\44\1\0\5\4\1\75"+
    "\7\4\1\44\1\4\1\75\1\44\1\4\3\44\7\4"+
    "\2\44\1\0\1\44\2\4\1\44\1\4\1\0\1\4"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\15\4"+
    "\1\44\2\4\1\44\1\117\3\44\7\4\2\44\1\0"+
    "\1\44\2\4\1\44\1\4\1\0\1\4\1\0\3\44"+
    "\2\0\1\45\1\0\1\44\1\0\4\4\1\75\10\4"+
    "\1\44\2\4\1\44\1\4\3\44\7\4\2\44\1\0"+
    "\1\44\2\4\1\44\1\4\1\0\1\4\1\0\3\44"+
    "\2\0\1\45\1\0\1\44\1\0\1\4\1\75\12\4"+
    "\1\75\1\44\2\4\1\44\1\4\3\44\1\75\6\4"+
    "\2\44\1\0\1\44\2\4\1\44\1\4\1\0\1\4"+
    "\1\0\3\44\2\0\1\45\1\0\1\44\1\0\1\4"+
    "\1\75\12\4\1\75\1\44\2\4\1\44\1\4\3\44"+
    "\1\75\2\4\1\75\3\4\2\44\1\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\11\4\1\75\3\4\1\44\2\4"+
    "\1\44\1\4\3\44\2\4\1\75\4\4\2\44\1\0"+
    "\57\112\1\0\10\113\1\112\46\113\1\120\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\7\4\1\101\5\4\1\44\2\4"+
    "\1\44\1\4\3\44\7\4\2\44\1\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\2\4\1\121\12\4\1\44\2\4"+
    "\1\44\1\4\3\44\7\4\2\44\1\0\1\44\2\4"+
    "\1\44\1\4\1\0\1\4\1\0\3\44\2\0\1\45"+
    "\1\0\1\44\1\0\1\75\1\4\1\75\11\4\1\75"+
    "\1\44\2\4\1\44\1\4\3\44\1\4\1\75\3\4"+
    "\1\75\1\4\2\44\1\0\10\120\1\122\47\120\1\44"+
    "\2\4\1\44\1\4\1\0\1\4\1\0\3\44\2\0"+
    "\1\45\1\0\1\44\1\0\7\4\1\123\5\4\1\44"+
    "\2\4\1\44\1\4\3\44\7\4\2\44\1\0\1\44"+
    "\2\4\1\44\1\4\1\0\1\4\1\0\3\44\2\0"+
    "\1\45\1\0\1\44\1\0\15\4\1\44\2\4\1\44"+
    "\1\4\3\44\1\4\1\77\5\4\2\44\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\7\1\1\11\1\1\1\11\32\1\2\11"+
    "\1\0\47\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[83];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public Assembler6502TokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			default:
				state = YYINITIAL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Assembler6502TokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Assembler6502TokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r':
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof)
              zzAtBOL = false;
            else
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1:
          { addToken(Token.IDENTIFIER);
          }
        case 14: break;
        case 11:
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 15: break;
        case 9:
          { addToken(Token.FUNCTION);
          }
        case 16: break;
        case 5:
          { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 17: break;
        case 13:
          { addToken(Token.VARIABLE);
          }
        case 18: break;
        case 7:
          { addToken(Token.WHITESPACE);
          }
        case 19: break;
        case 10:
          { addToken(Token.PREPROCESSOR);
          }
        case 20: break;
        case 4:
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 21: break;
        case 8:
          { addToken(Token.OPERATOR);
          }
        case 22: break;
        case 2:
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 23: break;
        case 12:
          { addToken(Token.LITERAL_CHAR);
          }
        case 24: break;
        case 3:
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 25: break;
        case 6:
          { addNullToken(); return firstToken;
          }
        case 26: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 84: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
